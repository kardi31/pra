<?php

/**
 * Staff_Model_Doctrine_BaseStaff
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $firstname
 * @property string $lastname
 * @property string $link
 * @property string $position
 * @property integer $branch_id
 * @property clob $description
 * @property integer $agent_id
 * @property string $phone
 * @property boolean $approved
 * @property boolean $view
 * @property integer $rank
 * @property float $customer_satisfaction
 * @property float $rating
 * @property boolean $claimed
 * @property integer $active_reviews
 * @property string $photo_root_id
 * @property string $email
 * @property string $sex
 * @property string $twitter
 * @property string $facebook
 * @property string $linkedin
 * @property Doctrine_Collection $Translation
 * @property Doctrine_Collection $AreasCovered
 * @property Doctrine_Collection $PhotoClaims
 * @property Doctrine_Collection $Claims
 * @property Doctrine_Collection $Updates
 * @property Doctrine_Collection $Awards
 * 
 * @package    Admi
 * @subpackage Staff
 * @author     MichaÅ‚ Folga <michalfolga@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Staff_Model_Doctrine_BaseStaff extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('staff_staff');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('firstname', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('lastname', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('link', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('position', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('branch_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('agent_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('approved', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('view', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('rank', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('customer_satisfaction', 'float', 5, array(
             'type' => 'float',
             'length' => '5',
             'scale' => '2',
             ));
        $this->hasColumn('rating', 'float', 5, array(
             'type' => 'float',
             'length' => '5',
             'scale' => '2',
             ));
        $this->hasColumn('claimed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('active_reviews', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('photo_root_id', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('sex', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('twitter', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('facebook', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('linkedin', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Staff_Model_Doctrine_StaffTranslation as Translation', array(
             'local' => 'id',
             'foreign' => 'id'));

        $this->hasMany('Staff_Model_Doctrine_AreaCovered as AreasCovered', array(
             'local' => 'id',
             'foreign' => 'staff_id'));

        $this->hasMany('Staff_Model_Doctrine_PhotoClaim as PhotoClaims', array(
             'local' => 'id',
             'foreign' => 'staff_id'));

        $this->hasMany('Staff_Model_Doctrine_Claim as Claims', array(
             'local' => 'id',
             'foreign' => 'staff_id'));

        $this->hasMany('Staff_Model_Doctrine_Update as Updates', array(
             'local' => 'id',
             'foreign' => 'staff_id'));

        $this->hasMany('Staff_Model_Doctrine_Award as Awards', array(
             'local' => 'id',
             'foreign' => 'staff_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'description',
             ),
             'tableName' => 'staff_staff_translation',
             'className' => 'StaffTranslation',
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}