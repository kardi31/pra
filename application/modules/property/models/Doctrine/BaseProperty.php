<?php

/**
 * Property_Model_Doctrine_BaseProperty
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $agent_id
 * @property integer $branch_id
 * @property clob $description
 * @property string $agent_ref
 * @property string $address_1
 * @property string $address_2
 * @property string $address_3
 * @property string $address_4
 * @property string $town
 * @property string $postcode1
 * @property string $postcode2
 * @property string $display_address
 * @property string $branch_identify
 * @property integer $status_id
 * @property integer $bedrooms
 * @property integer $bathrooms
 * @property integer $living_rooms
 * @property integer $price
 * @property integer $prop_sub_id
 * @property boolean $published
 * @property integer $trans_type_id
 * @property boolean $new_home
 * @property boolean $slideshow
 * @property boolean $featured
 * @property boolean $gold
 * @property boolean $draft
 * @property integer $valuation
 * @property integer $min_price
 * @property boolean $chain_fee
 * @property string $lat
 * @property string $lng
 * @property float $search_price
 * @property boolean $expired
 * @property string $media_image_60
 * @property string $media_image_text_60
 * @property string $media_document_50
 * @property string $media_document_text_50
 * @property Doctrine_Collection $Images
 * @property Doctrine_Collection $FloorPlans
 * @property Doctrine_Collection $Features
 * @property Property_Model_Doctrine_Let $Let
 * @property Property_Model_Doctrine_Sale $Sale
 * @property Doctrine_Collection $Leads
 * @property Doctrine_Collection $Alerts
 * 
 * @package    Admi
 * @subpackage Property
 * @author     MichaÅ‚ Folga <michalfolga@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Property_Model_Doctrine_BaseProperty extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('property_property');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('agent_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('branch_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('agent_ref', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('address_1', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('address_2', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('address_3', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('address_4', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('town', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('postcode1', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('postcode2', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('display_address', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('branch_identify', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('status_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('bedrooms', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('bathrooms', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('living_rooms', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('price', 'integer', 20, array(
             'type' => 'integer',
             'length' => '20',
             ));
        $this->hasColumn('prop_sub_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('trans_type_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('new_home', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('slideshow', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('featured', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('gold', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('draft', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('valuation', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('min_price', 'integer', 20, array(
             'type' => 'integer',
             'length' => '20',
             ));
        $this->hasColumn('chain_fee', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('lat', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('lng', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('search_price', 'float', 10, array(
             'type' => 'float',
             'length' => '10',
             'scale' => '2',
             ));
        $this->hasColumn('expired', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('media_image_60', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('media_image_text_60', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('media_document_50', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('media_document_text_50', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Property_Model_Doctrine_Image as Images', array(
             'local' => 'id',
             'foreign' => 'property_id'));

        $this->hasMany('Property_Model_Doctrine_FloorPlan as FloorPlans', array(
             'local' => 'id',
             'foreign' => 'property_id'));

        $this->hasMany('Property_Model_Doctrine_Feature as Features', array(
             'local' => 'id',
             'foreign' => 'property_id'));

        $this->hasOne('Property_Model_Doctrine_Let as Let', array(
             'local' => 'id',
             'foreign' => 'property_id'));

        $this->hasOne('Property_Model_Doctrine_Sale as Sale', array(
             'local' => 'id',
             'foreign' => 'property_id'));

        $this->hasMany('Property_Model_Doctrine_Lead as Leads', array(
             'local' => 'id',
             'foreign' => 'property_id'));

        $this->hasMany('Property_Model_Doctrine_Alert as Alerts', array(
             'local' => 'id',
             'foreign' => 'property_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}