<?php

/**
 * Branch_Model_Doctrine_BaseBranch
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $agent_id
 * @property string $office_name
 * @property string $office_link
 * @property string $address
 * @property string $town
 * @property string $county
 * @property string $country
 * @property string $postcode
 * @property string $phone
 * @property string $fax
 * @property string $email
 * @property string $url
 * @property integer $view
 * @property float $customer_satisfaction
 * @property float $rating
 * @property integer $votes
 * @property integer $rank
 * @property string $lat
 * @property string $lng
 * @property string $logo
 * @property clob $description
 * @property string $facebook
 * @property string $twitter
 * @property boolean $premium_support
 * @property boolean $approved
 * @property Doctrine_Collection $Translation
 * @property Doctrine_Collection $Enquiries
 * @property Doctrine_Collection $AreasCovered
 * @property Doctrine_Collection $Customers
 * @property Doctrine_Collection $Awards
 * @property Doctrine_Collection $OpeningHours
 * 
 * @package    Admi
 * @subpackage Branch
 * @author     MichaÅ‚ Folga <michalfolga@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Branch_Model_Doctrine_BaseBranch extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('branch_branch');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('agent_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('office_name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('office_link', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('town', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('county', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('country', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('postcode', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('fax', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('view', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('customer_satisfaction', 'float', 5, array(
             'type' => 'float',
             'length' => '5',
             'scale' => '2',
             ));
        $this->hasColumn('rating', 'float', 5, array(
             'type' => 'float',
             'length' => '5',
             'scale' => '2',
             ));
        $this->hasColumn('votes', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('rank', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('lat', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('lng', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('logo', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('facebook', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('twitter', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('premium_support', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('approved', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Branch_Model_Doctrine_BranchTranslation as Translation', array(
             'local' => 'id',
             'foreign' => 'id'));

        $this->hasMany('Branch_Model_Doctrine_Enquiry as Enquiries', array(
             'local' => 'id',
             'foreign' => 'branch_id'));

        $this->hasMany('Branch_Model_Doctrine_AreaCovered as AreasCovered', array(
             'local' => 'id',
             'foreign' => 'branch_id'));

        $this->hasMany('Branch_Model_Doctrine_Customer as Customers', array(
             'local' => 'id',
             'foreign' => 'branch_id'));

        $this->hasMany('Branch_Model_Doctrine_Awards as Awards', array(
             'local' => 'id',
             'foreign' => 'branch_id'));

        $this->hasMany('Branch_Model_Doctrine_OpeningHours as OpeningHours', array(
             'local' => 'id',
             'foreign' => 'branch_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'description',
             ),
             'tableName' => 'branch_branch_translation',
             'className' => 'BranchTranslation',
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}